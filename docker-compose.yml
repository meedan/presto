version: '3.9'

services:
  app:
    platform: linux/amd64
    build:
      context: .
      args:
        - PRESTO_PORT=${PRESTO_PORT}
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
        - S3_ENDPOINT=${S3_ENDPOINT}
        - QUEUE_SUFFIX=${QUEUE_SUFFIX}
        - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME}
        - OTEL_EXPORTER_OTLP_PROTOCOL=${OTEL_EXPORTER_OTLP_PROTOCOL}
        - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
        - OTEL_EXPORTER_OTLP_HEADERS=${OTEL_EXPORTER_OTLP_HEADERS}
        - HONEYCOMB_API_KEY=${HONEYCOMB_API_KEY}
        - HONEYCOMB_API_ENDPOINT=${HONEYCOMB_API_ENDPOINT}
        - REDIS_URL=${REDIS_URL}
        - CACHE_DEFAULT_TTL=${CACHE_DEFAULT_TTL}
        - CLASSYCAT_OUTPUT_BUCKET=${CLASSYCAT_OUTPUT_BUCKET}
        - CLASSYCAT_BATCH_SIZE_LIMIT=${CLASSYCAT_BATCH_SIZE_LIMIT}
        - CLASSYCAT_LLM_MODEL_NAME=${CLASSYCAT_LLM_MODEL_NAME}
        - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    env_file:
      - ./.env_file
    depends_on:
      elasticmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    links:
      - elasticmq
    volumes:
      - ./:/app
    ports:
      - "8000:8000"
    environment:
      ROLE: server
  elasticmq:
    image: softwaremill/elasticmq
    hostname: presto-elasticmq
    ports:
      - "9324:9324"
    healthcheck:
      test: ["CMD","wget","-q","-S","-O","-","127.0.0.1:9324/?Action=ListQueues"]
      interval: 10s
      timeout: 5s
      retries: 10
  redis:
    image: redis:latest
    hostname: presto-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  image:
    build: .
    platform: linux/amd64
    volumes:
      - "./:/app"
    env_file:
      - ./.env_file
    environment:
      ROLE: worker
      MODEL_NAME: image.Model
    depends_on:
      elasticmq:
        condition: service_healthy
      redis:
        condition: service_healthy
  audio:
    build: .
    platform: linux/amd64
    volumes:
      - "./:/app"
    env_file:
      - ./.env_file
    environment:
      ROLE: worker
      MODEL_NAME: audio.Model
    depends_on:
      elasticmq:
        condition: service_healthy
      redis:
        condition: service_healthy
  yake:
    build: .
    platform: linux/amd64
    volumes:
      - "./:/app"
    env_file:
      - ./.env_file
    environment: 
      ROLE: worker
      MODEL_NAME: yake_keywords.Model
    depends_on:
      elasticmq:
        condition: service_healthy
      redis:
        condition: service_healthy
#  classycat:
#    build: .
#    platform: linux/amd64
#    volumes:
#      - "./:/app"
#    env_file:
#      - ./.env_file
#    environment:
#      ROLE: worker
#      MODEL_NAME: classycat.Model
#    depends_on:
#      elasticmq:
#        condition: service_healthy
#      minio:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
